{"ast":null,"code":"var _jsxFileName = \"/Users/bowdenn/Desktop/playground/phonebook/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Inputs = ({\n  value,\n  setFunction\n}) => /*#__PURE__*/_jsxDEV(\"input\", {\n  value: value,\n  onChange: setFunction\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 3,\n  columnNumber: 42\n}, this);\n\n_c = Inputs;\n\nconst Filter = ({\n  text,\n  value,\n  setFunction\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [text, \" \", /*#__PURE__*/_jsxDEV(Inputs, {\n      value: value,\n      setFunction: setFunction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Filter;\n\nconst PersonForm = ({\n  handlePersonsChange,\n  newName,\n  newNumber,\n  handleNameChange,\n  handleNumberChange\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handlePersonsChange,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: newName,\n          onChange: handleNameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 20\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"number: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: newNumber,\n          onChange: handleNumberChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = PersonForm;\n\nconst Persons = () => {\n  // My first conditional operator!\n  // const result = condition ? val1 : val2 Meaning if condition is True then val1 is used and val2 is used when False.\n  const peopleToShow = showAll ? persons : persons.filter(person => person.name.toLowerCase().includes(newSearch.toLowerCase()) === true);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: peopleToShow.map(person => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [person.name, \" \", person.number]\n    }, person.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 44\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 11\n  }, this);\n};\n\n_c4 = Persons;\n\nconst App = () => {\n  _s();\n\n  const [persons, setPersons] = useState([{\n    name: 'Arto Hellas',\n    number: '040-123456'\n  }, {\n    name: 'Ada Lovelace',\n    number: '39-44-5323523'\n  }, {\n    name: 'Dan Abramov',\n    number: '12-43-234345'\n  }, {\n    name: 'Mary Poppendieck',\n    number: '39-23-6423122'\n  }]); // Holds the current state of an input, updated with each keystroke\n\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [newSearch, setNewSearch] = useState('');\n  const [showAll, setShowAll] = useState(true); // used to updated input\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value);\n  }; // If search input has any characters, showAll condition becomes false because there needs to be a filter\n\n\n  const handleSearchChange = event => {\n    setNewSearch(event.target.value);\n\n    if (event.target.value.length !== 0) {\n      setShowAll(false);\n    } else {\n      setShowAll(true);\n    }\n  }; // On form submit, stop refresh, create new object and check for duplicates\n\n\n  const handlePersonsChange = event => {\n    event.preventDefault();\n    const personObject = {\n      name: newName,\n      number: newNumber\n    };\n    checkDuplicateName(personObject);\n    setNewName('');\n    setNewNumber('');\n  }; // Checks current names in phonebook, alerting the user if they are trying to add a duplicate name\n\n\n  const checkDuplicateName = personInfo => {\n    for (let i in persons) {\n      if (personInfo.name.toLowerCase() === persons[i].name.toLowerCase()) {\n        window.alert(`${newName} is already added to phonebook`);\n        return;\n      }\n    }\n\n    setPersons(persons.concat(personInfo));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {\n      text: \"Search\",\n      value: newSearch,\n      setFunction: handleSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add New\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PersonForm, {\n      handlePersonsChange: handlePersonsChange,\n      newName: newName,\n      newNumber: newNumber,\n      handleNameChange: handleNameChange,\n      handleNumberChange: handleNumberChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: peopleToShow.map(person => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [person.name, \" \", person.number]\n      }, person.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 40\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Persons, {\n      persons: persons,\n      newSearch: newSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"SGfxAgtBQpQQnR0g05Ply7omkgg=\");\n\n_c5 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Inputs\");\n$RefreshReg$(_c2, \"Filter\");\n$RefreshReg$(_c3, \"PersonForm\");\n$RefreshReg$(_c4, \"Persons\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"sources":["/Users/bowdenn/Desktop/playground/phonebook/src/App.js"],"names":["React","useState","Inputs","value","setFunction","Filter","text","PersonForm","handlePersonsChange","newName","newNumber","handleNameChange","handleNumberChange","Persons","peopleToShow","showAll","persons","filter","person","name","toLowerCase","includes","newSearch","map","number","App","setPersons","setNewName","setNewNumber","setNewSearch","setShowAll","event","target","handleSearchChange","length","preventDefault","personObject","checkDuplicateName","personInfo","i","window","alert","concat"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nconst Inputs = ({value, setFunction}) => <input value={value} onChange={setFunction}></input>\n\nconst Filter = ({text, value, setFunction}) => {\n  return (\n    <div>{text} <Inputs value={value} setFunction={setFunction}/></div>\n  )\n}\n\nconst PersonForm = ({handlePersonsChange, newName, newNumber, handleNameChange, handleNumberChange}) => {\n  return (\n    <div>\n      <form onSubmit={handlePersonsChange}>\n        <div>name: <input value={newName} onChange={handleNameChange} /></div>\n        <div>number: <input value={newNumber} onChange={handleNumberChange} /></div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form> \n    </div>   \n  )\n}\n\nconst Persons = () => {\n  // My first conditional operator!\n  // const result = condition ? val1 : val2 Meaning if condition is True then val1 is used and val2 is used when False.\n  const peopleToShow = showAll\n  ? persons\n  : persons.filter(person => person.name.toLowerCase().includes(newSearch.toLowerCase()) === true)\n\n  return (<div>{peopleToShow.map(person => <div key={person.name}>{person.name} {person.number}</div>)}</div>)\n}\nconst App = () => {\n  const [persons, setPersons] = useState([\n    { name: 'Arto Hellas', number: '040-123456' },\n    { name: 'Ada Lovelace', number: '39-44-5323523' },\n    { name: 'Dan Abramov', number: '12-43-234345' },\n    { name: 'Mary Poppendieck', number: '39-23-6423122' }\n  ])\n  // Holds the current state of an input, updated with each keystroke\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newSearch, setNewSearch ] = useState('')\n  const [showAll, setShowAll] = useState(true)\n\n  // used to updated input\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  // If search input has any characters, showAll condition becomes false because there needs to be a filter\n  const handleSearchChange = (event) => {\n    setNewSearch(event.target.value)\n    if (event.target.value.length !== 0) {\n      setShowAll(false)\n    } else {\n      setShowAll(true)\n    }\n  }\n\n  // On form submit, stop refresh, create new object and check for duplicates\n  const handlePersonsChange = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber,\n\n    }\n    checkDuplicateName(personObject)\n    setNewName('')\n    setNewNumber('')\n  }\n  \n  // Checks current names in phonebook, alerting the user if they are trying to add a duplicate name\n  const checkDuplicateName = (personInfo) => {\n    for (let i in persons) {\n      if (personInfo.name.toLowerCase() === persons[i].name.toLowerCase()) {\n        window.alert(`${newName} is already added to phonebook`)\n        return\n      }\n    }\n    setPersons(persons.concat(personInfo))\n\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      {/* <div>search: <input text='Search:' value={newSearch} onChange={handleSearchChange}/></div> */}\n      <Filter text='Search' value={newSearch} setFunction={handleSearchChange}/>\n      <h2>Add New</h2>\n      <PersonForm\n        handlePersonsChange={handlePersonsChange}\n        newName={newName}\n        newNumber={newNumber}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <div>{peopleToShow.map(person => <div key={person.name}>{person.name} {person.number}</div>)}</div>\n      <Persons persons={persons} newSearch={newSearch}/>\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}