{"ast":null,"code":"var _jsxFileName = \"/Users/bowdenn/Desktop/playground/phonebook/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Inputs from './components/Inputs'; // const Inputs = ({value, setFunction}) => <input value={value} onChange={setFunction}></input>\n// const Filter = ({text, value, setFunction}) => {\n//   return (\n//     <div>{text} <Inputs value={value} setFunction={setFunction}/></div>\n//   )\n// }\n// const PersonForm = ({handlePersonsChange, newName, newNumber, handleNameChange, handleNumberChange}) => {\n//   return (\n//     <div>\n//       <form onSubmit={handlePersonsChange}>\n//         <div>name: <input value={newName} onChange={handleNameChange} /></div>\n//         <div>number: <input value={newNumber} onChange={handleNumberChange} /></div>\n//         <div>\n//           <button type=\"submit\">add</button>\n//         </div>\n//       </form> \n//     </div>   \n//   )\n// }\n// const Persons = ({showAll, persons, newSearch}) => {\n//   // My first conditional operator!\n//   // const result = condition ? val1 : val2 Meaning if condition is True then val1 is used and val2 is used when False.\n//   const peopleToShow = showAll\n//   ? persons\n//   : persons.filter(person => person.name.toLowerCase().includes(newSearch.toLowerCase()) === true)\n//   return (<div>{peopleToShow.map(person => <div key={person.name}>{person.name} {person.number}</div>)}</div>)\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [persons, setPersons] = useState([{\n    name: 'Arto Hellas',\n    number: '040-123456'\n  }, {\n    name: 'Ada Lovelace',\n    number: '39-44-5323523'\n  }, {\n    name: 'Dan Abramov',\n    number: '12-43-234345'\n  }, {\n    name: 'Mary Poppendieck',\n    number: '39-23-6423122'\n  }]); // Holds the current state of an input, updated with each keystroke\n\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [newSearch, setNewSearch] = useState('');\n  const [showAll, setShowAll] = useState(true); // used to updated input\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value);\n  }; // If search input has any characters, showAll condition becomes false because there needs to be a filter\n\n\n  const handleSearchChange = event => {\n    setNewSearch(event.target.value);\n\n    if (event.target.value.length !== 0) {\n      setShowAll(false);\n    } else {\n      setShowAll(true);\n    }\n  }; // On form submit, stop refresh, create new object and check for duplicates\n\n\n  const handlePersonsChange = event => {\n    event.preventDefault();\n    const personObject = {\n      name: newName,\n      number: newNumber\n    };\n    checkDuplicateName(personObject);\n    setNewName('');\n    setNewNumber('');\n  }; // Checks current names in phonebook, alerting the user if they are trying to add a duplicate name\n\n\n  const checkDuplicateName = personInfo => {\n    for (let i in persons) {\n      if (personInfo.name.toLowerCase() === persons[i].name.toLowerCase()) {\n        window.alert(`${newName} is already added to phonebook`);\n        return;\n      }\n    }\n\n    setPersons(persons.concat(personInfo));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {\n      text: \"Search\",\n      value: newSearch,\n      setFunction: handleSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add New\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PersonForm, {\n      handlePersonsChange: handlePersonsChange,\n      newName: newName,\n      newNumber: newNumber,\n      handleNameChange: handleNameChange,\n      handleNumberChange: handleNumberChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Persons, {\n      showAll: showAll,\n      persons: persons,\n      newSearch: newSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"SGfxAgtBQpQQnR0g05Ply7omkgg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/bowdenn/Desktop/playground/phonebook/src/App.js"],"names":["React","useState","Inputs","App","persons","setPersons","name","number","newName","setNewName","newNumber","setNewNumber","newSearch","setNewSearch","showAll","setShowAll","handleNameChange","event","target","value","handleNumberChange","handleSearchChange","length","handlePersonsChange","preventDefault","personObject","checkDuplicateName","personInfo","i","toLowerCase","window","alert","concat"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Inputs from './components/Inputs'\n// const Inputs = ({value, setFunction}) => <input value={value} onChange={setFunction}></input>\n\n// const Filter = ({text, value, setFunction}) => {\n//   return (\n//     <div>{text} <Inputs value={value} setFunction={setFunction}/></div>\n//   )\n// }\n\n// const PersonForm = ({handlePersonsChange, newName, newNumber, handleNameChange, handleNumberChange}) => {\n//   return (\n//     <div>\n//       <form onSubmit={handlePersonsChange}>\n//         <div>name: <input value={newName} onChange={handleNameChange} /></div>\n//         <div>number: <input value={newNumber} onChange={handleNumberChange} /></div>\n//         <div>\n//           <button type=\"submit\">add</button>\n//         </div>\n//       </form> \n//     </div>   \n//   )\n// }\n\n// const Persons = ({showAll, persons, newSearch}) => {\n//   // My first conditional operator!\n//   // const result = condition ? val1 : val2 Meaning if condition is True then val1 is used and val2 is used when False.\n//   const peopleToShow = showAll\n//   ? persons\n//   : persons.filter(person => person.name.toLowerCase().includes(newSearch.toLowerCase()) === true)\n\n//   return (<div>{peopleToShow.map(person => <div key={person.name}>{person.name} {person.number}</div>)}</div>)\n// }\nconst App = () => {\n  const [persons, setPersons] = useState([\n    { name: 'Arto Hellas', number: '040-123456' },\n    { name: 'Ada Lovelace', number: '39-44-5323523' },\n    { name: 'Dan Abramov', number: '12-43-234345' },\n    { name: 'Mary Poppendieck', number: '39-23-6423122' }\n  ])\n  // Holds the current state of an input, updated with each keystroke\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newSearch, setNewSearch ] = useState('')\n  const [showAll, setShowAll] = useState(true)\n\n  // used to updated input\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  // If search input has any characters, showAll condition becomes false because there needs to be a filter\n  const handleSearchChange = (event) => {\n    setNewSearch(event.target.value)\n    if (event.target.value.length !== 0) {\n      setShowAll(false)\n    } else {\n      setShowAll(true)\n    }\n  }\n\n  // On form submit, stop refresh, create new object and check for duplicates\n  const handlePersonsChange = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber,\n\n    }\n    checkDuplicateName(personObject)\n    setNewName('')\n    setNewNumber('')\n  }\n  \n  // Checks current names in phonebook, alerting the user if they are trying to add a duplicate name\n  const checkDuplicateName = (personInfo) => {\n    for (let i in persons) {\n      if (personInfo.name.toLowerCase() === persons[i].name.toLowerCase()) {\n        window.alert(`${newName} is already added to phonebook`)\n        return\n      }\n    }\n    setPersons(persons.concat(personInfo))\n\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Filter text='Search' value={newSearch} setFunction={handleSearchChange}/>\n      <h2>Add New</h2>\n      <PersonForm\n        handlePersonsChange={handlePersonsChange}\n        newName={newName}\n        newNumber={newNumber}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons showAll={showAll} persons={persons} newSearch={newSearch}/>\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}